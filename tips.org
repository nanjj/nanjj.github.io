#+title: Tips
#+date: <2017-12-20 Mon>
#+LINK: ncat https://nmap.org/ncat/
#+LINK: ncat guide https://nmap.org/ncat/guide/index.html
#+LINK: nmap https://nmap.org/

Some tips about linux kernel, ssh, qemu, ncat and more.

* Linux Kernel

  Kernel building takes too long time. We can use below methods
  together to speed up the process:

  1. Enable =tmpfs= to build in memory,
  2. Enable =ccache= to avoid unnecessary recompile,
  3. Enable =distcc= to build on multiple machines.

** Mount tmpfs

   #+BEGIN_SRC sh
   mkdir src .ccache
   mount -t tmpfs -o size=30G,mode=0755 tmpfs src
   mount -t tmpfs -o size=10G,mode=0755 tmpfs .ccache
   #+END_SRC
  Speed up kernel building via =ccache= and =distcc=:

** Enable ccache
  #+BEGIN_SRC sh
    apt-get install ccache
  #+END_SRC

** Enable distcc
   #+BEGIN_SRC sh
   apt-get install distcc
   echo 10.113.111.160 10.113.111.187 >> /etc/distcc/hosts
   #+END_SRC

   On =10.113.111.160= and  =10.113.111.187=:

   #+BEGIN_SRC sh
     apt-get install distcc
     cat > /etc/default/distcc <<EOF
     STARTDISTCC="true"
     ALLOWEDNETS="10.113.111.152"    # master build ip
     LISTENER="10.113.111.187"       # local ip
     EOF
     systemctl restart distcc
   #+END_SRC
** Build

   Build ubuntu kernel =Ubuntu-4.4.0-102.125= as below:
   #+BEGIN_SRC sh
     cd src
     git clone git://kernel.ubuntu.com/ubuntu/ubuntu-xenial
     cd ubuntu-xenial
     git checkout Ubuntu-4.4.0-102.125
     sed 's/CONFIG_VIRTIO_NET=y/CONFIG_VIRTIO_NET=m/g'
     export PATH=/usr/lib/ccache:$PATH
     export CCACHE_PREFIX="distcc"
     fakeroot debian/rules clean
     fakeroot debian/rules binary
   #+END_SRC

   It takes around 9 minutes on my machine.

* Ssh

** [[https://blog.scottlowe.org/2015/12/11/using-ssh-multiplexing/][Using SSH Multiplexing]]

   #+BEGIN_EXAMPLE
     ControlMaster auto
     ControlPath ~/.ssh/sockets/%r@%h-%p
     ControlPersist 600
   #+END_EXAMPLE

* QEMU

** which nic models qemu supports?
   #+BEGIN_SRC sh
     qemu-system-x86_64 -net nic,model=?
     #=>
     qemu: Supported NIC models: ne2k_pci,i82551,i82557b,i82559er,rtl8139,e1000,pcnet,virtio
   #+END_SRC
** Quit qemu =C-A C=.

* Ncat
  [[ncat][Ncat]] is a general-purpose command-line tool for reading, writing,
  redirecting, and encrypting data across a network. It is along with
  [[nmap][nmap]], but not so famous.

** Install

 To install ncat just install nmap, Ubuntu:
 #+BEGIN_EXAMPLE
   apt-get install nmap
 #+END_EXAMPLE

 Mac:

 #+BEGIN_EXAMPLE
   brew install nmap
 #+END_EXAMPLE

 Here some tips from me.

** Transfer Single File

  Transfer single file:

  #+BEGIN_EXAMPLE
    # on machine A
    ncat -p 80 -l --send-only < file
    # on machine B
    ncat <machine A ip> 80 --recv-only > file
  #+END_EXAMPLE

** Transfer Multiple Files

   Transfer multiple files:

   #+BEGIN_EXAMPLE
     # on machine A
     for file in *.deb; do
         echo $file | ncat -p 80 -l --send-only
         ncat -p 80 -l --send-only < $file
     done
     # on machine B
     while true; do
         file=$(ncat <machine A ip> 80 --recv-only) || break
         echo $file
         ncat <machine A ip> 80 --recv-only > $file
     done
   #+END_EXAMPLE

** Http Proxy

   Ncat can act as a http proxy server, which

   Run:

  #+BEGIN_EXAMPLE
    ncat -l -p 8888 --proxy-type http --allow 127.0.0.1
  #+END_EXAMPLE

  Test it(on the machine running ncat):

  #+BEGIN_EXAMPLE
    export https_proxy=http://127.0.0.1:8888
    curl https://www.google.com
  #+END_EXAMPLE

  Jump over the wall via ssh:

  #+BEGIN_EXAMPLE
    ssh -L 127.0.0.1:8888:127.0.0.1:8888 <your machine outside the wall>
  #+END_EXAMPLE

  Test it again(on the machine running =ssh -L=):

  #+BEGIN_EXAMPLE
    export http_proxy=http://127.0.0.1:8888
    curl http://www.google.com
  #+END_EXAMPLE

  Http request will go through your local port 8888, encrypted and
  jump over the wall, go to your target machine local port 8888, via
  ncat to access the world. It's safe, simple, stable and fast.

** Proxy Ssh

  Ncat http proxy mode support =CONNECT= method also. So it can be
  used as a ssh proxy:

  #+BEGIN_EXAMPLE
    ssh -o "ProxyCommand=ncat --proxy 127.0.0.1:8888 %h %p" user@host
  #+END_EXAMPLE

  Ssh traffic will go to your local port 8888, ssh will forward it to
  your jumpbox, which ncat is running there, to visit all the machines
  running behind the jumpbox. In this way, you can keep your ssh keys
  in your local, no need to copy anywhere in order to access your
  machines.

  You can put it to your =~/.ssh/config=:

  #+BEGIN_EXAMPLE
    Host: host
    Hostname: host
    ProxyCommand: ncat --proxy 127.0.0.1:8888 %h %p
  #+END_EXAMPLE

** Proxy Ansible

  You can run ansible with below configuration in your inventory:

  #+BEGIN_EXAMPLE
    [all:vars]
    ansible_ssh_common_args='-o ProxyCommand="ncat --proxy 127.0.0.1:8888 %h %p"'
  #+END_EXAMPLE

* Permission Bits

  #+CAPTION: Read, write and execute permissions
  | Permission | Octal | Description             |
  |------------+-------+-------------------------|
  | rwx        |     7 | Read, write and execute |
  | rw-        |     6 | Read and write          |
  | r-x        |     5 | Read and execute        |
  | r--        |     4 | Read                    |
  | -wx        |     3 | Write and execute       |
  | -w-        |     2 | Write                   |
  | --x        |     1 | Execute                 |
  | ---        |     0 | no permissions          |


  #+Caption: User, group and others
  | Permission | Octal | Field      |
  |------------+-------+------------|
  | rwx------  |  0700 | User       |
  | ---rwx---  |  0070 | Group      |
  | ------rwx  |  0007 | All Others |
